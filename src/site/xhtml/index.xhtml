<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2011, Everit Kft.

    All rights reserved.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
    MA 02110-1301  USA

-->
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
</head>
<body>
	<h1>Everit OSGi Rich Console</h1>
	<h2>Usage</h2>
	<p>Richconsole is a simple OSGi bundle that opens up a window where
		developers can deploy their maven based OSGi bundles just by dropping
		the project folder onto it.</p>
	<p>We tried many techniques to speed up our development workflow.
		We chose OSGi as the base of our stack. We tried to use several
		eclipse plugins to start the OSGi containers and try deploying the
		projects just as we develop. However, it was hard to work with any of
		them and we needed more time to solve issues with the tools than to
		develop.</p>
	<p>On the end we found out that we do not want to start the server
		with an IDE based plugin. The OSGi server is very good as it is. Ones
		we started we need an easier way to deploy our bundles right after we
		modify them from our development environment. And this is the point
		where the richconsole module helps.</p>
	<p>When you drop this very simple module that has no dependency but
		only JDK packages it will check if:</p>
	<ul>
		<li><p>
				The OSGi server is started in a graphical environment where the user
				can see the screen. To check this the module uses the <a
					href="http://docs.oracle.com/javase/6/docs/api/java/awt/GraphicsEnvironment.html#isHeadless()">GraphicsEnvironment.isHeadless()</a>
				function.
			</p></li>
		<li><p>The environment is not started from the
				integration-test goal of our plugin. During normal compilation you
				normally do not want to see the deployer window appearing and
				disappearing. This is checked via the existence of the
				"EOSGI_STOP_AFTER_TESTS" environment variable that our plugin sets
				during the compilation phase. Althout this check is done this
				richconsole module can run in any OSGi environment created by any
				application (not only created by the dist goal of our plugin).</p></li>
	</ul>

	<p>If every checks is done and all returns true, an always on top
		window opens up when the bundle starts. The window accepts mouse drop
		events. You can drop the folders of your OSGi maven projects onto the
		window. The followings will happen:</p>
	<ul>
		<li><p>The module will iterate through the dropped folders
				(multiple project folders can be dropped at the same time) and
				checks the followings:</p>
			<ul>
				<li><p>if there is a target/classes/META-INF/MANIFEST.MF
						file in that folder.</p></li>
				<li><p>if the MANIFEST.MF file contains the
						Bundle-SymbolicName and Bundle-Version header entries.</p></li>
			</ul></li>
		<li><p>Based on the algorithm There will be two iterations</p>
			<ul>
				<li><p>In the first iteration:</p>
					<ul>
						<li><p>if a bundle with the same location already
								installed, it will be updated.</p></li>
						<li><p>if a bundle with the same symbolic name and
								version is installed already, then the installed bundle will be
								stopped and uninstalled and the bundle from the project folder
								will be installed instead</p></li>
						<li><p>if multiple bundles with the same symbolic name
								installed but none of them has the same version the one with the
								closest version will be stopped, uninstalled and the bundle from
								the project folder will be installed instead</p></li>
					</ul></li>
				<li><p>In the second iteration all freshly installed
						bundles will be started.</p></li>
			</ul></li>
		<li>A refresh is called on the OSGi framework. The refresh
			command should remove the wirings from the uninstalled bundles and
			should rewire to the freshly installed bundles.</li>
	</ul>
	<p>As the OSGi deployer window is minimalistic it will not show any
		status update. Instead you should check the log of the OSGi container
		in another window (probably the log of the server is opened on another
		monitor than your IDE is running)</p>
	<h2>What IDEs are supported?</h2>
	<p>The deployer is not designed to work with a special IDE. It
		catches drops that contain folder urls. Drops can come from Total
		Commander, from Double Commander, Eclipse, etc. However, to make
		effective development you are recommended to use an IDE that:</p>
	<ul>
		<li><p>Creates the .class file to the target/classes folder
				of your project as soon as you save the java source.</p></li>
		<li><p>Updates the MANIFEST.MF file in
				target/classes/META-INF folder as soon as you save a java source or
				you make modifications to the MANIFEST on another place.</p></li>
	</ul>
	<p>If you have this features you do not have to always recompile
		your project with maven and generate the jar bundle. You only need to
		drop those project that you know you made relevant changes in.</p>
	<p>Currently we know one stack that has this features: Eclipse, M2E
		plugin, maven-bundle-plugin.</p>
	.
	<h2>Where can I find a tutorial to do Test Driven Development with
		the help of this module?</h2>
	<p>
		There is a step-by-step tutorial available at <a
			href="http://everit.org/osgi/dev/step-by-step-guide.html">http://everit.org/osgi/dev/step-by-step-guide.html</a>.
	</p>
	<h2>Is there any more planned features this module will now?</h2>
	<p>Yes. We would like to create more windows that can be opened up
		from the always-on-top deployer window. We would like to extend the
		functionality with windows like bundle manager but with the strict
		rule that they do not need any special dependency (like a http
		server). This module is planned to speed up the development but not to
		add console features to live servers.</p>
</body>
</html>